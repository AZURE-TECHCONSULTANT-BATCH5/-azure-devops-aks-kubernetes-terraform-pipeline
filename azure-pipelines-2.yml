
trigger:
- master

pool:
  vmImage: 'ubuntu-latest'
variables:
- name: DEV_ENVIRONMENT
  value: dev 
- name: QA_ENVIRONMENT
  value: qa 
# Stage-1: Terraform Validate Stage
## Step-1: Publish Artifacts to Pipeline (Pipeline artifacts provide a way to share files between stages in a pipeline or between different pipelines. )
## Step-2: Install Latest Terraform (0.13.5) (Ideally not needed if we use default Ubuntu Agents)
## Step-3: Validate Terraform Manifests (terraform init, terraform validate)
stages:
  - stage: TerraformValidate
    jobs:
      - job: TerraformValidateJobs
        continueOnError: false
        steps:
        - task: PublishPipelineArtifact@1
          displayName: publish Artifacts
          inputs:
            targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests-aks'
            artifact: 'terraform-manifests-aks'
            publishLocation: 'pipeline'
        - task: TerraformInstaller@1
          displayName: Terraform Install
          inputs:
           terraformVersion: 'latest' 
        - task: TerraformTaskV4@4
          displayName: terraform Init
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests-aks'
            backendServiceArm: 'terraform-aks-azurerm-svc-con'
            backendAzureRmResourceGroupName: 'Emma-backend-capstone-rg'
            backendAzureRmStorageAccountName: 'terraformbackend0329'
            backendAzureRmContainerName: 'storageblobdatacontributor'
            backendAzureRmKey: 'aks-base.tfstate'
        - task: TerraformTaskV4@4
          displayName: TerraformVaildate
          inputs:
            provider: 'azurerm'
            command: 'validate'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests-aks'
           


## Stage-2: Deploy Stages for Dev & QA
# Deployment-1: Deploy Dev AKS Cluster
## Step-1: Define Variables for environments
## Step-2: Download SSH Secure File
## Step-3: Terraform Initialize (State Storage to store in Azure Storage Account for Dev AKS Cluster)
## Step-4: Terraform Plan (Create Plan)
## Step-5: Terraform Apply (Use the plan created in previous step)


  # Stage-2: Deploy Stages for Dev & QA
# Deployment-2: Deploy QA AKS Cluster
## Step-1: Download Secure File
## Step-2: Terraform Initialize (State Storage to store in Azure Storage Account)
## Step-3: Terraform Plan 
## Step-4: Terraform Appl

  - stage: DeployAKSClusters
    jobs: 
      - deployment:  DeployDevAKSCluster
        displayName:  DeployDevAKSCluster
        pool:
          vmImage: 'ubuntu-latest'
        environment: $(DEV_ENVIRONMENT)
        strategy: 
          runOnce:
           deploy:
             steps:
             - task: DownloadSecureFile@1
               displayName: Download SSH Key
               name: sshkey
               inputs:
                 secureFile: 'aks-terraform-devops-ssh-key-ububtu.pub'
             - task: TerraformTaskV4@4
               displayName: Terraform Init
               inputs:
                provider: 'azurerm'
                command: 'init'
                workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests-ask-out'
                backendServiceArm: 'terraform-aks-azurerm(68f1889e-6fa1-40e8-b7b8-1385bf061947)'
                backendAzureRmResourceGroupName: 'Emma-backend-capstone-rg'
                backendAzureRmStorageAccountName: 'terraformbackend0329'
                backendAzureRmContainerName: 'storageblobdatacontributor'
                backendAzureRmKey: 'aks-(DEV_ENVIRONMENT).tfstate'
             - task: TerraformTaskV4@4
               displayName: Terraform Tlan
               inputs:
                provider: 'azurerm'
                command: 'plan'
                workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests-aks-out'
                commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(DEV_ENVIRONMENT) -out $(System.DefaultWorkingDirectory)/terraform-manifests-aks-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                environmentServiceNameAzureRM: 'terraform-aks-azurerm(1)(68f1889e-6fa1-40e8-b7b8-1385bf061947)'
             - task: TerraformTaskV4@4
               displayName: Terraform Apply
               inputs:
                provider: 'azurerm'
                command: 'apply'
                workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests-aks-out'
                commandOptions: '$(System.DefaultWorkingDirectory)/terraform-manifests-aks-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                environmentServiceNameAzureRM: 'terraform-aks-azurerm(2)(68f1889e-6fa1-40e8-b7b8-1385bf061947)'
                allowTelemetryCollection: false